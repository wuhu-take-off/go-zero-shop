// Code generated by goctl. DO NOT EDIT.
// Source: shop.proto

package goodsserve

import (
	"context"

	"TongChi_shop/rpc/shop"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GoodsAddReq       = shop.GoodsAddReq
	GoodsAddResp      = shop.GoodsAddResp
	GoodsDelReq       = shop.GoodsDelReq
	GoodsDelResp      = shop.GoodsDelResp
	GoodsList         = shop.GoodsList
	GoodsListReq      = shop.GoodsListReq
	GoodsListResp     = shop.GoodsListResp
	GoodsUpdateReq    = shop.GoodsUpdateReq
	GoodsUpdateResp   = shop.GoodsUpdateResp
	SendEmailAuthReq  = shop.SendEmailAuthReq
	SendEmailAuthResp = shop.SendEmailAuthResp
	SpecificationReq  = shop.SpecificationReq
	SpecificationResp = shop.SpecificationResp
	UserLoginReq      = shop.UserLoginReq
	UserLoginResp     = shop.UserLoginResp

	GoodsServe interface {
		// 获取商品列表
		GoodsList(ctx context.Context, in *GoodsListReq, opts ...grpc.CallOption) (*GoodsListResp, error)
		// 添加商品
		GoodsAdd(ctx context.Context, in *GoodsAddReq, opts ...grpc.CallOption) (*GoodsAddResp, error)
		// 更新商品
		GoodsUpdate(ctx context.Context, in *GoodsUpdateReq, opts ...grpc.CallOption) (*GoodsUpdateResp, error)
		// 删除山炮
		GoodsDel(ctx context.Context, in *GoodsDelReq, opts ...grpc.CallOption) (*GoodsDelResp, error)
	}

	defaultGoodsServe struct {
		cli zrpc.Client
	}
)

func NewGoodsServe(cli zrpc.Client) GoodsServe {
	return &defaultGoodsServe{
		cli: cli,
	}
}

// 获取商品列表
func (m *defaultGoodsServe) GoodsList(ctx context.Context, in *GoodsListReq, opts ...grpc.CallOption) (*GoodsListResp, error) {
	client := shop.NewGoodsServeClient(m.cli.Conn())
	return client.GoodsList(ctx, in, opts...)
}

// 添加商品
func (m *defaultGoodsServe) GoodsAdd(ctx context.Context, in *GoodsAddReq, opts ...grpc.CallOption) (*GoodsAddResp, error) {
	client := shop.NewGoodsServeClient(m.cli.Conn())
	return client.GoodsAdd(ctx, in, opts...)
}

// 更新商品
func (m *defaultGoodsServe) GoodsUpdate(ctx context.Context, in *GoodsUpdateReq, opts ...grpc.CallOption) (*GoodsUpdateResp, error) {
	client := shop.NewGoodsServeClient(m.cli.Conn())
	return client.GoodsUpdate(ctx, in, opts...)
}

// 删除山炮
func (m *defaultGoodsServe) GoodsDel(ctx context.Context, in *GoodsDelReq, opts ...grpc.CallOption) (*GoodsDelResp, error) {
	client := shop.NewGoodsServeClient(m.cli.Conn())
	return client.GoodsDel(ctx, in, opts...)
}
